import psutil
import pyshark

def get_preferred_interface():
    net_if_addrs = psutil.net_if_addrs()
    net_if_stats = psutil.net_if_stats()

    preferred_interfaces = ['Wi-Fi', 'Ethernet', 'Ethernet 2', 'Ethernet 3']
    active_interfaces = []

    for interface in preferred_interfaces:
        if interface in net_if_addrs and net_if_stats[interface].isup:
            active_interfaces.append(interface)

    if active_interfaces:
        return active_interfaces[0]
    return None

def packet_callback(packet):
    try:
        if 'HTTP' in packet:
            http_layer = packet.http
            print(f"HTTP Packet detected: {packet}")  # Debug output
            if 'response_code' in http_layer.field_names:
                response_code = http_layer.response_code
                print(f"HTTP Response Code: {response_code}")  # Debug output
                if response_code.startswith('2'):
                    if 'content_length' in http_layer.field_names:
                        content_length = int(http_layer.content_length)
                        print(f"Content Length: {content_length}")  # Debug output
                        if content_length > 102400:  # Set a threshold for content length (in bytes, 100 KB)
                            content_type = http_layer.content_type.lower() if 'content_type' in http_layer.field_names else ''
                            print(f"Content Type: {content_type}")  # Debug output
                            if any(ct in content_type for ct in ['image', 'application', 'video', 'audio']):
                                print(f"Download detected: HTTP ({content_length} bytes)")
                    else:
                        print("Content Length not found")
        elif 'SSL' in packet:
            if int(packet.length) > 102400:  # Set a threshold for packet length (in bytes, 100 KB)
                print(f"Potential download detected: HTTPS (large packet, {packet.length} bytes)")
    except AttributeError as e:
        print(f"AttributeError: {e}")
    except Exception as e:
        print(f"Exception: {e}")

def listen_on_ports(interface, ports):
    bpf_filter = 'tcp port ' + ' or tcp port '.join(map(str, ports))
    capture = pyshark.LiveCapture(interface=interface, bpf_filter=bpf_filter)

    print(f"Listening on interface {interface} on ports {ports}...")
    capture.apply_on_packets(packet_callback, timeout=None)

if __name__ == "__main__":
    active_interface = get_preferred_interface()
    if active_interface:
        print(f"Active Interface: {active_interface}")
        listen_on_ports(active_interface, [80, 443])
    else:
        print("No suitable active network interfaces found.")
